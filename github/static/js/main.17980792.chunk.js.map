{"version":3,"sources":["Github.js","Repos.js","App.js","serviceWorker.js","index.js"],"names":["github","props","user","id","src","avatar_url","alt","name","repos","className","href","html_url","description","App","state","profile","getUserHandler","client_secret","console","log","axios","get","then","response","setState","data","catch","error","userInputHandler","e","target","value","this","rep","git","map","repo","key","type","placeholder","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0SAUeA,EARF,SAACC,GAAD,OACX,6BACE,mCAASA,EAAMC,KAAKC,IACpB,yBAAKC,IAAKH,EAAMC,KAAKG,WAAYC,IAAI,gBACrC,qCAAWL,EAAMC,KAAKK,QCKXC,G,YARH,SAACP,GAAD,OAEV,yBAAKQ,UAAU,SACb,2CAAgB,uBAAGC,KAAMT,EAAMO,MAAMG,UAAWV,EAAMO,MAAMD,OACrC,OAA1BN,EAAMO,MAAMI,YAAoB,2BAAIX,EAAMO,MAAMI,aAAiB,gDC2DnDC,E,4MA3DbC,MAAM,CACJZ,KAAK,GACLa,QAAQ,KACRP,MAAM,M,EAIRQ,eAAe,SAACd,GACd,IACMe,EAAc,4CAGpBC,QAAQC,IAAIjB,GACZkB,IAAMC,IAAN,uCAA0CnB,EAA1C,sBALgB,uBAKhB,0BAAuFe,IACpFK,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAACT,QAAQQ,EAASE,UAC/BC,OAAM,SAAAC,GAAK,OAAET,QAAQC,IAAIQ,MAC9BP,IAAMC,IAAN,uCAA0CnB,EAA1C,2BAPiB,EAOjB,iBANgB,cAMhB,sBATgB,uBAShB,0BAAsIe,IACnIK,MAAK,SAAAC,GACJL,QAAQC,IAAII,GACZ,EAAKC,SAAS,CAAChB,MAAMe,EAASE,W,EAIpCG,iBAAiB,SAACC,GAChB,EAAKL,SAAS,CAACtB,KAAK2B,EAAEC,OAAOC,S,uDAGtB,IAAD,OACA/B,EAAOgC,KAAKlB,MAAMC,QACxBG,QAAQC,IAAInB,GACZkB,QAAQC,IAAIa,KAAKlB,MAAMN,OACvB,IACIyB,EADAC,EAAI,yCAgBR,OAdGlC,IACDkC,EAAI,kBAAC,EAAD,CAAQhC,KAAM8B,KAAKlB,MAAMC,UACzBiB,KAAKlB,MAAMN,OAGbU,QAAQC,IAAIa,KAAKlB,MAAMN,OACvByB,EAAID,KAAKlB,MAAMN,MAAM2B,KAAI,SAACC,GAExB,OADAlB,QAAQC,IAAIiB,GACL,kBAAC,EAAD,CAAO5B,MAAO4B,EAAMC,IAAKD,EAAKjC,SALvC8B,EAAI,8CAYN,yBAAKxB,UAAU,OACb,2BAAO6B,KAAK,OAAOC,YAAY,kBAAkBC,SAAUR,KAAKJ,mBAChE,4BAAQa,QAAS,kBAAI,EAAKzB,eAAe,EAAKF,MAAMZ,QAApD,UACCgC,EACAD,O,GAtDSS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAC,GACLT,QAAQS,MAAMA,EAAM+B,c","file":"static/js/main.17980792.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst github=(props)=>(\r\n  <div>\r\n    <h2>Id: {props.user.id}</h2>\r\n    <img src={props.user.avatar_url} alt=\"UserProfile\"/>\r\n    <h3>Name: {props.user.name}</h3>\r\n  </div>\r\n);\r\n\r\nexport default github;","import React from 'react';\r\nimport './Repos.css';\r\n\r\nconst repos=(props)=>(\r\n  \r\n  <div className=\"Repos\">\r\n    <h4>Repos link: <a href={props.repos.html_url}>{props.repos.name}</a></h4>\r\n{props.repos.description!==null? <p>{props.repos.description}</p>:<p>No description</p>}\r\n  </div>\r\n);\r\n\r\nexport default repos;","import React,{Component} from 'react';\nimport axios from 'axios';\nimport GitHub from './Github';\nimport './App.css';\nimport Repos from './Repos';\n\nclass App extends Component{\n  state={\n    user:'',\n    profile:null,\n    repos:null\n  }\n\n//  componentDidUpdate(){\n  getUserHandler=(user)=>{\n    const client_id='e81ce2048eb081aae6fc';\n    const client_secret='4b9c42dcddbc786f44f409af3879eb404c8b79513';\n    const repo_count=5;\n    const repo_sort='created:asc';\n    console.log(user);\n    axios.get(`https://api.github.com/users/${user}?client_id=${client_id}&client_secret=${client_secret}`)\n      .then(response=>{\n        this.setState({profile:response.data});\n      }).catch(error=>console.log(error));\n    axios.get(`https://api.github.com/users/${user}/repos?per_page=${repo_count}&sort=${repo_sort}&client_id=${client_id}&client_secret=${client_secret}`)\n      .then(response=>{\n        console.log(response);\n        this.setState({repos:response.data})\n      });\n  }\n\n  userInputHandler=(e)=>{\n    this.setState({user:e.target.value});\n  }\n\n  render(){\n    const github=this.state.profile;\n    console.log(github);\n    console.log(this.state.repos);\n    let git=<p>Enter name</p>;\n    let rep;\n    if(github){\n      git=<GitHub user={this.state.profile}/>\n      if(!this.state.repos){\n        rep=<p>No repos found</p>\n      }else{\n        console.log(this.state.repos);\n        rep=this.state.repos.map((repo)=>{\n          console.log(repo);\n          return <Repos repos={repo} key={repo.id}/>;\n        });\n      }\n    }\n    \n    \n    return (\n      <div className=\"App\">\n        <input type=\"text\" placeholder=\"Enter user name\" onChange={this.userInputHandler}/>\n        <button onClick={()=>this.getUserHandler(this.state.user)}>Submit</button>\n        {git}\n        {rep}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}